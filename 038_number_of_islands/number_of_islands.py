from collections import deque
from typing import List

class Solution:
    def __init__(self):
        self.__directions__ = [(0, 1),   # Right
                               (1, 0),  # Down
                               (0, -1),   # Left
                               (-1, 0),] # Up
        
    def numIslands(self, grid: List[List[str]]) -> int:
        self.x_len = len(grid[0])
        self.y_len = len(grid)
        ilands = 0

        for y in range(self.y_len):
            for x in range(self.x_len):
                if grid[y][x] == '1':
                  self._bfs(grid,y,x)
                  ilands +=1
        return ilands
    
    def _bfs(self, grid: List[List[str]], y, x):
        stack = deque([(y,x)])
        grid[y][x] = 0
        
        while stack:
          y, x = stack.popleft()
          for y_direction, x_direction in self.__directions__:
              new_x = x + x_direction
              new_y = y + y_direction
              if 0 <= new_x < self.x_len and 0 <= new_y < self.y_len and grid[new_y][new_x] == '1':
                  grid[new_y][new_x] = 0
                  stack.append((new_y, new_x))

def main():
   tester = Solution()
   grid_1 = get_grid_1()
   grid_2 = get_grid_2()
   print(tester.numIslands(grid_1))
   print(tester.numIslands(grid_2))

def get_grid_1():
  return [
     ["1","1","1","1","0"],
    ["1","1","0","1","0"],
    ["1","1","0","0","0"],
    ["0","0","0","0","0"]
  ]
def get_grid_2():
  return [
    ["1","1","0","0","0"],
    ["1","1","0","0","0"],
    ["0","0","1","0","0"],
    ["0","0","0","1","1"]
  ]

def get_grid_3():
   return [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
          ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
          ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
          ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
          ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
          ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
          ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
          ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
          ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
          ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
          ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
          ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

if __name__ == "__main__":
   main()